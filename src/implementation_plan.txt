DONE Test Contact Wrench constraint
DONE Add timestep check to robot model update.
DONE Add contact wrench gradient

DONE Add Contact LCP constraint
DONE Add Task and Reaction Force LCP constraint
Add Time Integration Constraint

Add Soft keyframes objective function
Add hard keyframes constraint


Optimization Object

Objective_Functions

Fr^T Q Fr			Reaction Force
xddot^T V xddot		Task Acceleration
r^T M r 			KeyFrames

qdot^T N qdot

Fdot^T Q_1 Fdot

Constraints
	- Unilateral Contacts
	- Whole Body Controller
	- Time Integration 			

	- Hard Key Frames


Initialize x, xlow, xupp -----------------------

num_states(q, qdot). at timestep = 0: q_pos are strictly bounded.
num_tasks(xddot)
num_contacts(Fr)

Initialize Flow, Fupp     ----------------------

Contact constraints:
	num_contacts -> Number of Phi >=0
	num_contacts -> Phi*||Fr|| = 0
	Friction Constraint UFr >= 0

Task constraints:
	xddot number_of_contacts -> Phi*||xddot|| = 0

WBC constraint
	6 Virtual joints = 0
	-Tmax <= NUM_ACT_Joints <= Tmax

Time Integration
	num_q = 0
	num_qdot = 0


GetF ---------------------------------------------
UpdateObjVars(x)

Populate F
	- Objective Function

Getq_qdot_state(timestep)
Get_xddot(timestep)
Get_Fr(timestep)


Get G(timestep, opt_vars)  ---------------------------------------------
Contact Constraint - return J_phi (known for flat contacts)
Phi*Fr - return Phi for Fr, Jacobian*Fr for q's.
0's for all other timesteps

UFr -> return U(q) for Fr
0's for qdot
0's for xddot
0's for all other time steps

WBC - Sv*Jc for Fr's
	- Sa*Jc for Fr's
0's for all other timesteps

Time Integration Constraint


qdot_{t+1} = q_dot{t} + q_ddot{t}(q_t+1, qdot_t+1, tau(q_t, qdot_t))dt
q_{t+1} = q_{t} + qdot_{t+1}*dt
grad(q_t{t+1}) = [I, dt]



Implement 
// Generic Constraint class
	// Each constraint knows the bound of F apriori
	// Each constraint evaluates F.
	// Each constraint provides the constraint gradient G to elements that // are known

// Constraint List class contains all of the constraints
	// Has the complete constraint F vector 
	// Has the complete constraint gradient G matrix 


// Generic Objective Function class
	// each objective function Evaluates Fr, xddot, Frdot, qdot, etc. 
	// separately.

#### 
Optimization problem dictates the following:
	robot starting configuration
	the complete contact list
	the complete task list
	all the keyframes (soft and hard)

	which objective function to use

	init(){
		initialize task list, contact list, and keyframes
		initialize optimization variables
	}

	solve(x){
		gets x, updates optimization variables	
		constraint_list.evaluate_funcs(optimization_vars, vector F)	
		constraint_list.evaluate_gradients(optimization_vars, matrix G)
	}

	outputs the optimization variable list



Constraint List and Opt Var List are just containers. Do not overload their functions.

The optimization object decides how to add the optimization vars to the optimization variable list. It is also responsible for updating the variables.

The constraint object decides how to use the variable list via the list's getter functions. 
	-> the variable list should have enough information for the constraint object to construct the constraint function vector F and constraint gradient matrix G


To Do's:
	Constraint object parent class
	Objective Function parent class
	necessary implementations on initializing bounds

	Constraint Objects Implementation:
		Time Integration Constraint
		LCP Constraint (flat ground)
		WBDC constraint

		Key Frame Constraint		



--------------------
Previous thoughts:
Optimization variables
q, qdot, xddot, Fr, soft_kf_frames

Initialize Values()
	
	Robot Initial Joint Positions
	Task List
	Contact List
	Soft KeyFrames

	Hard Constraints:
	Time Integration Constraints(time_steps)
	Whole Body Controller Constraints(Task List)
	Hard KeyFrames

Initialize_Containers
	Opt_Variable



// Set state initial values and upper and lower bounds
int timesteps = 1
std::vector<double> robot_x;
std::vector<double> task_accelerations;
std::vector<double> Fr_x;
std::vector<double> soft_kf_frames;

Robot Initial Joint Positions -> getStates_Upper_Lower_Bounds(robot_x, robot_xupp, robot_xlow)
Task List -> getStates(task_accelerations)
Contact List -> getStates(Fr_x)

Prepare OptVariable Container



// Define F -----------------
Get the current states for the timesteps.

Populate F:

	// True for all timesteps
	Unlitateral Contacts:
		LCP Constraints Phi*Fr 
	Whole Body Controller
	Time Integration

	// For some timestamps
	Key Frame



// -----------------------------------------

SNOPT user function:
set x initially
set x u,l bounds



set F u,l bounds

define F
define G if possible


visualization of states


-----------------------
Schedule:
1. WBC Constraint Gradient
2. Optimization Object

3. LCP Constraint
4. LCP Constraint Gradient

5. Time Integration Constraint
6. Time Integration Gradient

7. Soft Key Frames
8. Hard Key Frames

9. Visualization



